{"version":3,"sources":["components/Spinner.js","components/Counter.js","components/MovieCard.js","components/MovieDetails.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","Counter","useState","counter","setCounter","onClick","MovieCard","title","type","posterUrl","console","log","className","src","alt","MovieDetails","rated","runtime","genre","plot","actors","rating","OMDB_ENDPOINT","process","getMoviesBySearchTerm","searchTerm","a","endpointURL","fetch","data","json","movies","Search","getMovieDetailsById","movieId","movie","App","isLoading","setIsLoading","setMovie","movieList","setMovieList","useRef","useEffect","then","onSubmit","e","preventDefault","current","value","term","setTimeout","catch","finally","placeholder","ref","map","Title","Type","Poster","imdbID","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bc81e13.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Spinner() {\n  return <div>Loading...</div>;\n}\n\nexport default Spinner;\n","import { useState } from \"react\";\n\nfunction Counter() {\n  const [counter, setCounter] = useState(0);\n\n  const handleClickIncrement = () => {\n    setCounter(counter + 1); // Update counter during next render\n  };\n\n  const handleClickDecrement = () => {\n    setCounter(counter - 1); // Update counter during next render\n  };\n\n  return (\n    <div>\n      <h1>Counter state value: {counter}</h1>\n\n      <button onClick={handleClickIncrement}>Increment</button>\n      <button onClick={handleClickDecrement}>Decrement</button>\n    </div>\n  );\n}\n\nexport default Counter;\n","function MovieCard({ title, type, posterUrl }) {\n  console.log(\"<MovieCard /> component rendering...\");\n\n  return (\n    <div className=\"moviecard\">\n      <img\n        className=\"moviecard__poster\"\n        src={posterUrl}\n        alt={`${title} poster`}\n      />\n      <footer className=\"moviecard__footer\">\n        <h3 className=\"moviecard__title\">{title}</h3>\n        <span className=\"moviecard__type\">{type}</span>\n      </footer>\n    </div>\n  );\n}\n\nexport default MovieCard;\n","function MovieDetails({\n  posterUrl,\n  title,\n  rated,\n  runtime,\n  genre,\n  plot,\n  actors,\n  rating,\n}) {\n  console.log(\"<MovieDetails /> component rendering...\");\n\n  return (\n    <div>\n      <img src={posterUrl} alt={title} />\n      <h1>{title}</h1>\n      <div>{rating}</div>\n      <ul>\n        <li>{rated}</li>\n        <li>{runtime}</li>\n        <li>{genre}</li>\n      </ul>\n\n      <h3>Plot</h3>\n      <p>{plot}</p>\n\n      <h3>Actors</h3>\n      <p>{actors}</p>\n    </div>\n  );\n}\n\nexport default MovieDetails;\n","const apiKey = process.env.REACT_APP_OMDB_KEY; // grabbed from inside our .env file\nconst OMDB_ENDPOINT = `https://www.omdbapi.com/?apikey=${apiKey}&`;\n\n// Write an arrow function called getMoviesBySearchTerm that takes a search string as input and uses fetch and async/await to get an array of movies with a matching title from OMDb API.\nconst getMoviesBySearchTerm = async (searchTerm) => {\n  const endpointURL = `${OMDB_ENDPOINT}s=${searchTerm}`;\n\n  const data = await fetch(endpointURL);\n  const movies = await data.json();\n\n  return movies.Search;\n};\n\n// Write another arrow function called getMovieDetailsById that takes a valid OMDb movie id as input and uses fetch and async/await to get an object of detailed information about the specified movie.\nconst getMovieDetailsById = async (movieId) => {\n  const endpointURL = `${OMDB_ENDPOINT}i=${movieId}`;\n\n  const data = await fetch(endpointURL);\n  const movie = await data.json();\n\n  return movie;\n};\n\n// default exports, 1 per file allowed\n// named exports, can have as many as we want\n\nexport { getMoviesBySearchTerm, getMovieDetailsById };\n","import { useState, useEffect, useRef } from \"react\";\n\nimport \"./App.css\";\n\n// Components\nimport Spinner from \"./components/Spinner\";\nimport Counter from \"./components/Counter\";\nimport MovieCard from \"./components/MovieCard\";\nimport MovieDetails from \"./components/MovieDetails\";\n\n// Utilities\nimport { getMoviesBySearchTerm, getMovieDetailsById } from \"./utils\";\n\nfunction App() {\n  console.log(\"<App /> component rendering...\");\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [movieList, setMovieList] = useState([]);\n\n  const searchTerm = useRef(\"\"); // useRef doesn't request a re-render\n\n  // useEffect(() => {\n  //   getMoviesBySearchTerm(\"superman\").then((movies) => {\n  //     console.log(\"getMoviesBySearchTerm Done!\", movies);\n\n  //     setMovieList(movies);\n  //   });\n  // }, []);\n\n  useEffect(() => {\n    // use setTimeOut to simulate internet lag\n    // setTimeout(() => {\n    getMovieDetailsById(\"tt1285035\").then((movie) => {\n      console.log(\"getMovieDetailsById Done!\", movie);\n      setMovie(movie);\n    });\n    // }, 4000);\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setIsLoading(true);\n\n    console.log(searchTerm.current.value);\n\n    const term = searchTerm.current.value;\n\n    setTimeout(() => {\n      getMoviesBySearchTerm(term)\n        .then((movies) => {\n          console.log(\"getMoviesBySearchTerm Done!\", movies);\n\n          setMovieList(movies);\n        })\n        .catch(() => {})\n        .finally(() => {\n          setIsLoading(false);\n          //searchTerm.current.value = \"\";\n        });\n    }, 3000);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Movie App</h1>\n\n      <h4>Movie List</h4>\n\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" placeholder=\"Enter movie...\" ref={searchTerm} />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <div className=\"movielist\">\n          {movieList.map((movie) => (\n            <MovieCard\n              key={movie.imdbID}\n              title={movie.Title}\n              type={movie.Type}\n              posterUrl={movie.Poster}\n            />\n          ))}\n        </div>\n      )}\n\n      <Counter />\n      <Counter />\n\n      {/* <pre>\n        <code>{JSON.stringify(movie)}</code>\n      </pre> */}\n\n      <MovieDetails\n        posterUrl=\"https://m.media-amazon.com/images/M/MV5BOGUyZDUxZjEtMmIzMC00MzlmLTg4MGItZWJmMzBhZjE0Mjc1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_SX300.jpg\"\n        title=\"The Social Network\"\n        rated=\"PG-13\"\n        runtime=\"180 mins\"\n        genre=\"action\"\n        plot=\"Guy gets rich at the end and loses friends.\"\n        actors=\"John Doe\"\n        rating=\"8.4\"\n      />\n\n      <hr />\n\n      {movie ? (\n        <MovieCard\n          title={movie.Title}\n          type={movie.Type}\n          posterUrl={movie.Poster}\n        />\n      ) : (\n        <div>Loading..</div>\n      )}\n\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}